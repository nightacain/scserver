// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
const token = localStorage.getItem('token');
if (!token) {
    window.location.href = '/index.html';
}

// URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render
const BACKEND_URL = 'https://scserver.onrender.com';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å URL —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–æ–∫–µ–Ω–æ–º
const socket = io(BACKEND_URL, {
    auth: {
        token: token
    },
    transports: ['websocket'],
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000
});

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    isMyTurn: false,
    selectedPiece: null,
    gameStarted: false,
    playerColor: null,
    board: null
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
socket.on('connect_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    if (error.message === 'Invalid token' || error.message === 'Token required') {
        localStorage.removeItem('token');
        window.location.href = '/index.html';
    } else {
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.');
    }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
socket.on('connect', () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.emit('joinGame', {
        token: token,
        username: localStorage.getItem('username')
    });
    
    document.getElementById('moveButton').disabled = true;
});

socket.on('disconnect', () => {
    console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    document.getElementById('moveButton').disabled = true;
    alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
});

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
socket.on('gameStart', (data) => {
    console.log('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å', data);
    gameState.gameStarted = true;
    gameState.playerColor = data.color;
    gameState.isMyTurn = data.color === 'white'; // –ë–µ–ª—ã–µ —Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–º–∏
    gameState.board = data.board;
    
    updateBoard(data.board);
    updateGameStatus();
    
    alert(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –∏–≥—Ä–∞–µ—Ç–µ ${data.color === 'white' ? '–±–µ–ª—ã–º–∏' : '—á–µ—Ä–Ω—ã–º–∏'}`);
});

// –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
socket.on('enemyMove', (data) => {
    console.log('–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', data);
    gameState.board = data.board;
    gameState.isMyTurn = true;
    
    updateBoard(data.board);
    updateGameStatus();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
socket.on('gameState', (data) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', data);
    gameState.board = data.board;
    gameState.isMyTurn = data.currentPlayer === socket.id;
    
    updateBoard(data.board);
    updateGameStatus();
});

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
socket.on('gameOver', (data) => {
    console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞', data);
    gameState.gameStarted = false;
    gameState.isMyTurn = false;
    
    const message = data.winner === socket.id ? '–í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
    alert(message);
    
    document.getElementById('moveButton').disabled = true;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
socket.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞
function sendMove() {
    if (!gameState.isMyTurn || !gameState.selectedPiece) {
        alert('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å–≤–æ—è —Ñ–∏–≥—É—Ä–∞
    const piece = gameState.board[gameState.selectedPiece.x][gameState.selectedPiece.y];
    if (!piece || piece.color !== gameState.playerColor) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É');
        return;
    }

    const move = {
        from: gameState.selectedPiece,
        to: { x: 0, y: 0 }, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –∫–ª–µ—Ç–∫—É
        color: gameState.playerColor
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('playerMove', move);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
    const cells = document.querySelectorAll('.cell');
    cells[gameState.selectedPiece.x * 8 + gameState.selectedPiece.y].classList.remove('selected');
    gameState.selectedPiece = null;
    gameState.isMyTurn = false;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
function updateGameStatus() {
    const moveButton = document.getElementById('moveButton');
    moveButton.disabled = !gameState.isMyTurn || !gameState.gameStarted;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function updateBoard(board) {
    const gameBoard = document.getElementById('gameBoard');
    gameBoard.innerHTML = '';

    for (let i = 0; i < 8; i++) {
        for (let j = 0; j < 8; j++) {
            const cell = document.createElement('div');
            cell.className = `cell ${(i + j) % 2 === 0 ? 'white' : 'black'}`;
            
            if (board[i][j]) {
                const piece = document.createElement('div');
                piece.className = `piece ${board[i][j].color}`;
                if (board[i][j].isKing) {
                    piece.classList.add('king');
                }
                cell.appendChild(piece);
            }

            cell.addEventListener('click', () => handleCellClick(i, j));
            gameBoard.appendChild(cell);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
function handleCellClick(x, y) {
    if (!gameState.isMyTurn || !gameState.gameStarted) return;

    const piece = gameState.board[x][y];

    if (!gameState.selectedPiece) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å–≤–æ—è —Ñ–∏–≥—É—Ä–∞
        if (piece && piece.color === gameState.playerColor) {
            gameState.selectedPiece = { x, y };
            const cells = document.querySelectorAll('.cell');
            cells[x * 8 + y].classList.add('selected');
        }
    } else {
        // –î–µ–ª–∞–µ–º —Ö–æ–¥
        const move = {
            from: gameState.selectedPiece,
            to: { x, y },
            color: gameState.playerColor
        };

        socket.emit('playerMove', move);
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const cells = document.querySelectorAll('.cell');
        cells[gameState.selectedPiece.x * 8 + gameState.selectedPiece.y].classList.remove('selected');
        gameState.selectedPiece = null;
        gameState.isMyTurn = false;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –¥–æ—Å–∫–∏
const style = document.createElement('style');
style.textContent = `
    .game-board {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        gap: 2px;
        padding: 10px;
        background: #2c3e50;
        border-radius: 8px;
        max-width: 600px;
        margin: 0 auto;
    }

    .cell {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        position: relative;
    }

    .cell.white {
        background: #ecf0f1;
    }

    .cell.black {
        background: #34495e;
    }

    .cell.selected {
        box-shadow: inset 0 0 0 3px #e74c3c;
    }

    .piece {
        width: 80%;
        height: 80%;
        border-radius: 50%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

    .piece.white {
        background: #fff;
        border: 2px solid #bdc3c7;
    }

    .piece.black {
        background: #2c3e50;
        border: 2px solid #34495e;
    }

    .piece.king::after {
        content: 'üëë';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.2em;
    }

    .piece:hover {
        transform: scale(1.1);
    }
`;
document.head.appendChild(style); 